# Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Queue class using linked list
class Queue:
    def __init__(self):
        self.front = None
        self.rear = None

    # Enqueue operation
    def enqueue(self, data):
        new_node = Node(data)
        if self.rear is None:
            self.front = self.rear = new_node
            return
        self.rear.next = new_node
        self.rear = new_node

    # Dequeue operation
    def dequeue(self):
        if self.front is None:
            print("Queue is empty")
            return
        temp = self.front
        self.front = self.front.next

        # If the queue becomes empty
        if self.front is None:
            self.rear = None
        return temp.data

    # Peek front
    def peek(self):
        if self.front is None:
            print("Queue is empty")
            return None
        return self.front.data

    # Check if queue is empty
    def is_empty(self):
        return self.front is None

    # Display the queue
    def display(self):
        temp = self.front
        while temp:
            print(temp.data, end=" -> ")
            temp = temp.next
        print("None")

# Example usage
if __name__ == "__main__":
    q = Queue()
    q.enqueue(10)
    q.enqueue(20)
    q.enqueue(30)

    print("Queue contents:")
    q.display()

    print("Front element:", q.peek())

    q.dequeue()
    print("After dequeue:")
    q.display()
