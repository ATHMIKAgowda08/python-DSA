class Node:
    def __init__(self, data):
        self.next = None

class CircularLinkedList:
    def __init__(self):
        self.last = None  

    def addToEmpty(self, data):
        if self.last is not None: 
            return self.last
        new_node = Node(data)
        self.last = new_node
        self.last.next = self.last
        return self.last

    def addFront(self, data):
        if self.last is None:
            return self.addToEmpty(data)
        new_node = Node(data)
        new_node.next = self.last.next
        self.last.next = new_node
        return self.last

    def addEnd(self, data):  
        if self.last is None:
            return self.addToEmpty(data)
        new_node = Node(data)
        new_node.next = self.last.next
        self.last.next = new_node
        self.last = new_node
        return self.last

    def display(self):
        if self.last is None:
            print("List is empty")
            return
        current = self.last.next
        while True:
            print(current.data, end=' ')
            current = current.next
            if current == self.last.next:
                break
        print()
if __name__ == "__main__":

    cll = CircularLinkedList()

    
